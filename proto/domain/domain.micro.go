// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/domain/domain.proto

/*
Package go_micro_srv_LPS_Domain is a generated protocol buffer package.

It is generated from these files:
	proto/domain/domain.proto

It has these top-level messages:
	Empty
	Service
	Metadata
	CreateModel
	Model
	ModelId
	Page
	Models
	Condition
*/
package go_micro_srv_LPS_Domain

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Domain service

type DomainService interface {
	Create(ctx context.Context, in *CreateModel, opts ...client.CallOption) (*Empty, error)
	Update(ctx context.Context, in *Model, opts ...client.CallOption) (*Empty, error)
	View(ctx context.Context, in *ModelId, opts ...client.CallOption) (*Model, error)
	Delete(ctx context.Context, in *Condition, opts ...client.CallOption) (*Empty, error)
	List(ctx context.Context, in *Condition, opts ...client.CallOption) (*Models, error)
}

type domainService struct {
	c    client.Client
	name string
}

func NewDomainService(name string, c client.Client) DomainService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.LPS.Domain"
	}
	return &domainService{
		c:    c,
		name: name,
	}
}

func (c *domainService) Create(ctx context.Context, in *CreateModel, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Domain.Create", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainService) Update(ctx context.Context, in *Model, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Domain.Update", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainService) View(ctx context.Context, in *ModelId, opts ...client.CallOption) (*Model, error) {
	req := c.c.NewRequest(c.name, "Domain.View", in)
	out := new(Model)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainService) Delete(ctx context.Context, in *Condition, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "Domain.Delete", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domainService) List(ctx context.Context, in *Condition, opts ...client.CallOption) (*Models, error) {
	req := c.c.NewRequest(c.name, "Domain.List", in)
	out := new(Models)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Domain service

type DomainHandler interface {
	Create(context.Context, *CreateModel, *Empty) error
	Update(context.Context, *Model, *Empty) error
	View(context.Context, *ModelId, *Model) error
	Delete(context.Context, *Condition, *Empty) error
	List(context.Context, *Condition, *Models) error
}

func RegisterDomainHandler(s server.Server, hdlr DomainHandler, opts ...server.HandlerOption) error {
	type domain interface {
		Create(ctx context.Context, in *CreateModel, out *Empty) error
		Update(ctx context.Context, in *Model, out *Empty) error
		View(ctx context.Context, in *ModelId, out *Model) error
		Delete(ctx context.Context, in *Condition, out *Empty) error
		List(ctx context.Context, in *Condition, out *Models) error
	}
	type Domain struct {
		domain
	}
	h := &domainHandler{hdlr}
	return s.Handle(s.NewHandler(&Domain{h}, opts...))
}

type domainHandler struct {
	DomainHandler
}

func (h *domainHandler) Create(ctx context.Context, in *CreateModel, out *Empty) error {
	return h.DomainHandler.Create(ctx, in, out)
}

func (h *domainHandler) Update(ctx context.Context, in *Model, out *Empty) error {
	return h.DomainHandler.Update(ctx, in, out)
}

func (h *domainHandler) View(ctx context.Context, in *ModelId, out *Model) error {
	return h.DomainHandler.View(ctx, in, out)
}

func (h *domainHandler) Delete(ctx context.Context, in *Condition, out *Empty) error {
	return h.DomainHandler.Delete(ctx, in, out)
}

func (h *domainHandler) List(ctx context.Context, in *Condition, out *Models) error {
	return h.DomainHandler.List(ctx, in, out)
}
